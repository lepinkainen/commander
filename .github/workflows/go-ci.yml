---
name: Go CI

'on':
  push:
    branches: [main, develop]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true  # Automatically caches go.mod/go.sum dependencies

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run tests with coverage
        run: task test-ci

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  build:
    needs: [test, lint]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        run: task build-ci

      - name: Rename binary for release
        shell: bash
        run: |
          if [ -f "build/commander.exe" ]; then
            mv build/commander.exe build/commander-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          else
            mv build/commander build/commander-${{ matrix.goos }}-${{ matrix.goarch }}
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: commander-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/commander-*

      - name: Upload coverage reports to Codecov (Optional)
        uses: codecov/codecov-action@v5
        if: success() && matrix.os == 'ubuntu-latest' && hashFiles('./coverage.out') != ''
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*
          generate_release_notes: true
          draft: false
          prerelease: false
